func (d *Decoder) any() (retValue interface{}, error os.Error) {
     l, err := d.uint32()
     if err != nil {
     	return nil, err
     }
     hashValue := make([]byte, *l)
     err = d.SliceOfBytes(hashValue, *l)
     if err != nil {
     	return nil, err
     }
     d.indexToValue = append(d.indexToValue, retValue)	
     index := len(d.indexToValue) - 1
     {{if len .TypeCases}}
     encodedHash := []byte(hex.EncodeToString(hashValue))
     {{end}}
     switch {
     {{range .TypeCases}}
     case bytes.Equal(encodedHash, []byte("{{.HashValue}}")):
     	{{$decodingValue := .EncodeValueMethod | isdecodingValue}}
	p, err := d.{{.EncodeValueMethod}}()	
	if err != nil {
     	   return nil, err
     	}
     	retValue = {{if $decodingValue}}*{{end}}(p)
     {{end}}
     case bytes.Equal(hashValue, []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}):
     	  _, err  := d.uint8()
	  if err != nil {
     	   return nil, err
     	   }
     	  retValue = nil
     case bytes.Equal(hashValue, []byte{0xc2, 0x71, 0x6e, 0x3c, 0x34, 0x13, 0xc0, 0xbe, 0xb3, 0x9e, 0x2e, 0xbc, 0xc7, 0x99, 0x62, 0x3f, 0x28, 0xe9, 0x9d, 0x19, 0x71, 0x6a, 0x0, 0x5b, 0x69, 0x4b, 0x1c, 0xbb, 0x3d, 0x8d, 0xcc, 0x45, 0xbd, 0x51, 0xca, 0x50, 0xc7, 0x3f, 0x8a, 0x64, 0xc8, 0xa0, 0xf0, 0xb, 0x46, 0x9a, 0x87, 0x5, 0xe9, 0x3c, 0xb9, 0x27, 0x91, 0xdf, 0x95, 0x88, 0x1b, 0x2e, 0xfa, 0x9f, 0xc0, 0x1f, 0xcb, 0xad}):
     	  p, err := d.int8()
	  if err != nil {
     	   return nil, err
     	}
     	retValue = *(p)
     case bytes.Equal(hashValue, []byte{0x9, 0x66, 0x78, 0xbb, 0x4a, 0x86, 0x63, 0x8d, 0x8e, 0xc6, 0x58, 0x8e, 0xcc, 0x2d, 0x89, 0x5a, 0x5c, 0x17, 0xb4, 0x86, 0x37, 0x8c, 0x81, 0xc2, 0xf2, 0xac, 0xf2, 0x48, 0x67, 0x57, 0x82, 0x13, 0x3e, 0x2e, 0x7d, 0x80, 0xb6, 0x66, 0x8d, 0x84, 0xc4, 0x55, 0xf4, 0xc9, 0xe1, 0x33, 0xfc, 0x71, 0xb, 0x77, 0x43, 0x63, 0x6, 0x82, 0x76, 0x63, 0x7, 0xbc, 0xf1, 0x64, 0xdb, 0xd9, 0x5c, 0x93}):
     	  p, err := d.uint8()
	  if err != nil {
     	   return nil, err
     	}
     	retValue = *(p)
     case bytes.Equal(hashValue, []byte{0x99, 0x7f, 0x69, 0x9c, 0x17, 0xfd, 0x6, 0x74, 0x8c, 0x2d, 0xba, 0xc4, 0x61, 0x1, 0x35, 0x21, 0xf1, 0x97, 0xd8, 0x1e, 0x74, 0x3c, 0x2f, 0x96, 0x56, 0xe6, 0xdc, 0xfc, 0x14, 0x1e, 0xd, 0x83, 0x36, 0xdc, 0x73, 0x36, 0xb0, 0xf4, 0x9e, 0x40, 0x2b, 0xfe, 0x97, 0x6f, 0xfa, 0xa5, 0x27, 0xac, 0xe1, 0xa2, 0x57, 0x2a, 0xae, 0x6d, 0x18, 0x22, 0xe2, 0xdc, 0xd8, 0x79, 0xe0, 0xb6, 0xf6, 0x7e}):
     	  p, err := d.int16()
	  if err != nil {
     	   return nil, err
     	}
     	retValue = *(p)
     case bytes.Equal(hashValue, []byte{0xa9, 0x1f, 0x92, 0xf4, 0xe9, 0x96, 0xb6, 0xd4, 0xa4, 0xcb, 0x85, 0x8d, 0x11, 0x80, 0x20, 0x10, 0xd6, 0x29, 0xba, 0x29, 0xe1, 0x89, 0x50, 0x2c, 0xa0, 0xf2, 0xcb, 0x1d, 0x86, 0xb8, 0x27, 0x3b, 0x67, 0xf3, 0x35, 0x72, 0xd1, 0x78, 0x15, 0xcc, 0xb0, 0x94, 0x94, 0x6f, 0x2, 0xab, 0x2e, 0x46, 0xcd, 0x74, 0xea, 0xf5, 0x15, 0xa, 0x26, 0xdc, 0x4e, 0xf7, 0xd, 0x9f, 0x3a, 0x9c, 0x6e, 0x55}):
     	  p, err := d.uint16()
	  if err != nil {
     	   return nil, err
     	}
     	retValue = *(p)
     case bytes.Equal(hashValue, []byte{0xeb, 0xc1, 0x67, 0x8b, 0x6, 0x82, 0x70, 0x21, 0x38, 0xc2, 0xd9, 0x9e, 0x33, 0x22, 0xd1, 0xa8, 0xc7, 0x2e, 0x9b, 0x68, 0xe9, 0x41, 0x12, 0x0, 0x1e, 0x3e, 0x51, 0xa8, 0xf5, 0xd9, 0xfa, 0x34, 0xc, 0x44, 0x9c, 0x6, 0x6d, 0x9d, 0x4c, 0xe7, 0x2a, 0x6, 0xab, 0x75, 0x77, 0x5d, 0xdf, 0x28, 0x34, 0x88, 0x7c, 0x7e, 0x96, 0x97, 0xbb, 0x8a, 0x95, 0xfe, 0x7, 0x65, 0xf7, 0x7c, 0x7e, 0x4c}):
     	  p, err := d.int32()
	  if err != nil {
     	   return nil, err
     	}
     	retValue = *(p)
     case bytes.Equal(hashValue, []byte{0xce, 0xf4, 0x3a, 0x5, 0xae, 0x67, 0xd9, 0x73, 0xc2, 0xa2, 0x1d, 0xf8, 0xcd, 0xf9, 0xd2, 0xde, 0x69, 0x8d, 0xd, 0xb7, 0x61, 0xb9, 0x51, 0x22, 0x58, 0xed, 0x8f, 0xb1, 0x83, 0xf1, 0x5c, 0xff, 0x5b, 0x84, 0xe2, 0x14, 0xe, 0x10, 0x68, 0x3f, 0x7a, 0xd9, 0xa7, 0x8f, 0x5b, 0xe4, 0x9e, 0x4e, 0x0, 0x7d, 0xcb, 0xfb, 0xd1, 0x69, 0x59, 0x9d, 0xbf, 0x9b, 0x75, 0x65, 0x15, 0x9e, 0x8b, 0x82}):
     	  p, err := d.uint32()
	  if err != nil {
     	   return nil, err
     	}
     	retValue = *(p)
     case bytes.Equal(hashValue, []byte{0x56, 0x16, 0x70, 0x35, 0xd0, 0x9, 0x18, 0x69, 0xe, 0xae, 0xad, 0x60, 0xd1, 0xee, 0x39, 0xa8, 0x61, 0x45, 0x58, 0x5b, 0x99, 0x20, 0x94, 0x57, 0x1f, 0xb0, 0x48, 0xeb, 0xb2, 0xcf, 0x5c, 0xa5, 0x8d, 0xc7, 0x8e, 0x7e, 0x3c, 0x89, 0xcd, 0x2f, 0xdc, 0xf2, 0x1c, 0x2a, 0xe3, 0xd2, 0x7f, 0x98, 0xc2, 0xad, 0x1c, 0x3d, 0x4e, 0x62, 0xd9, 0xdb, 0xc8, 0xc8, 0x59, 0xc5, 0xd5, 0xc6, 0xed, 0x7a}):
     	  p, err := d.int64()
	  if err != nil {
     	   return nil, err
     	}
     	retValue = *(p)
     case bytes.Equal(hashValue, []byte{0x11, 0x26, 0xb3, 0xd, 0x51, 0x59, 0x87, 0x5e, 0xd, 0x5b, 0x93, 0xfc, 0x92, 0xf0, 0x78, 0xaa, 0x12, 0xac, 0x93, 0xb8, 0x30, 0x1f, 0x48, 0xe, 0x13, 0x4d, 0x8b, 0xfb, 0x4c, 0x58, 0xfa, 0x3a, 0x69, 0x6a, 0x81, 0x1, 0xc5, 0x47, 0xc1, 0x55, 0x43, 0x95, 0x41, 0xdf, 0x3c, 0x8e, 0xb6, 0x96, 0x4a, 0x3c, 0x88, 0xab, 0x3f, 0x88, 0xed, 0x37, 0x5f, 0x8, 0x4a, 0x41, 0x8e, 0xd5, 0xda, 0x1e}):
     	  p, err := d.uint64()
	  if err != nil {
     	   return nil, err
     	}
     	retValue = *(p)
     case bytes.Equal(hashValue, []byte{0x42, 0x36, 0xae, 0xd3, 0x62, 0xca, 0x34, 0x75, 0x94, 0x52, 0xf0, 0x5f, 0x44, 0x83, 0x61, 0x75, 0x69, 0x39, 0xcf, 0x69, 0x74, 0x91, 0xee, 0x8d, 0x35, 0x8c, 0xd7, 0xa1, 0x63, 0xf, 0x88, 0x86, 0x6b, 0x52, 0xdd, 0x6d, 0xe1, 0xb2, 0x26, 0xf4, 0x3a, 0x9c, 0x9e, 0xf1, 0x56, 0xd, 0xf1, 0x48, 0x7, 0x39, 0x46, 0xf8, 0xe9, 0xd3, 0xab, 0x86, 0xe0, 0x1c, 0x98, 0xd, 0x17, 0x6b, 0x2, 0x63}):
     	  p, err := d.float32()
	  if err != nil {
     	   return nil, err
     	}
     	retValue = *(p)
     case bytes.Equal(hashValue, []byte{0x65, 0x9b, 0xb2, 0x59, 0x85, 0xe2, 0x60, 0xe7, 0x1e, 0x12, 0x17, 0x3f, 0xc3, 0x1f, 0x20, 0x45, 0x8, 0x9e, 0x7e, 0x11, 0x6b, 0xaa, 0xb3, 0x1e, 0x6d, 0x7d, 0x7a, 0x5b, 0xe3, 0x3d, 0x40, 0xb5, 0x40, 0x6, 0x52, 0x85, 0x37, 0x80, 0x2c, 0xd8, 0x7d, 0x48, 0x67, 0xe3, 0x9a, 0xdd, 0xc9, 0x13, 0x11, 0x2c, 0xa5, 0xcc, 0x5a, 0x33, 0xbc, 0x35, 0x6b, 0x3e, 0xa8, 0x75, 0x93, 0x84, 0xcf, 0x1b}):
     	  p, err := d.float64()
	  if err != nil {
     	   return nil, err
     	}
     	retValue = *(p)
     case bytes.Equal(hashValue, []byte{0x3e, 0x76, 0x6, 0x81, 0x73, 0x27, 0x61, 0xed, 0x16, 0x8e, 0xa3, 0x8, 0xe1, 0x10, 0x11, 0x85, 0xe1, 0xbd, 0x39, 0x2, 0xee, 0x67, 0x60, 0x21, 0x6a, 0x59, 0xc4, 0x7, 0x5a, 0x99, 0xc1, 0x46, 0xb7, 0xcd, 0x98, 0x14, 0xce, 0x14, 0x47, 0xe, 0xb0, 0x80, 0x6d, 0x91, 0x66, 0x50, 0xb0, 0xe5, 0xe, 0x77, 0x6f, 0x53, 0xe5, 0xd1, 0x72, 0x28, 0x1d, 0xd0, 0xe1, 0x70, 0x43, 0xc8, 0x65, 0x39}):
     	  p, err := d.bool()
	  if err != nil {
     	   return nil, err
     	}
     	retValue = *(p)
     case bytes.Equal(hashValue, []byte{0x27, 0x57, 0xcb, 0x3c, 0xaf, 0xc3, 0x9a, 0xf4, 0x51, 0xab, 0xb2, 0x69, 0x7b, 0xe7, 0x9b, 0x4a, 0xb6, 0x1d, 0x63, 0xd7, 0x4d, 0x85, 0xb0, 0x41, 0x86, 0x29, 0xde, 0x8c, 0x26, 0x81, 0x1b, 0x52, 0x9f, 0x3f, 0x37, 0x80, 0xd0, 0x15, 0x0, 0x63, 0xff, 0x55, 0xa2, 0xbe, 0xee, 0x74, 0xc4, 0xec, 0x10, 0x2a, 0x2a, 0x27, 0x31, 0xa1, 0xf1, 0xf7, 0xf1, 0xd, 0x47, 0x3a, 0xd1, 0x8a, 0x6a, 0x87}):
     	  p, err := d.string()
	  if err != nil {
     	     return nil, err
     	  }
     	retValue = *(p)
     default:
	e := NewSayIError("Wrong type used as Any")
	return retValue, e
     }
     d.indexToValue[index] = retValue		
     return retValue, nil
}

func (d *Decoder) anyInternal() (retValue interface{}, error os.Error) {
     // hashValue := d.string()
     l, err := d.uint32()
     if err != nil {
     	return nil, err
     }
     hashValue := make([]byte, *l)
     err = d.SliceOfBytes(hashValue, *l)
     if err != nil {
     	return nil, err
     }

     {{if len .TypeCases}}
     encodedHash := []byte(hex.EncodeToString(hashValue))     
     {{end}}

     switch {
     {{range .TypeCases}}
     case bytes.Equal(encodedHash, []byte("{{.HashValue}}")):
     	{{$decodingValue := .EncodeValueMethod | isdecodingValue}}
	p, err := d.{{.EncodeInternalMethod}}()
	if err != nil {
     	   return nil, err
     	}
     	retValue = {{if $decodingValue}}*{{end}}(p)
     {{end}}
     case bytes.Equal(hashValue, []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}):
     _, err := d.uint8()
     if err != nil {
     	return nil, err
     }
     retValue = nil
     case bytes.Equal(hashValue, []byte{0xc2, 0x71, 0x6e, 0x3c, 0x34, 0x13, 0xc0, 0xbe, 0xb3, 0x9e, 0x2e, 0xbc, 0xc7, 0x99, 0x62, 0x3f, 0x28, 0xe9, 0x9d, 0x19, 0x71, 0x6a, 0x0, 0x5b, 0x69, 0x4b, 0x1c, 0xbb, 0x3d, 0x8d, 0xcc, 0x45, 0xbd, 0x51, 0xca, 0x50, 0xc7, 0x3f, 0x8a, 0x64, 0xc8, 0xa0, 0xf0, 0xb, 0x46, 0x9a, 0x87, 0x5, 0xe9, 0x3c, 0xb9, 0x27, 0x91, 0xdf, 0x95, 0x88, 0x1b, 0x2e, 0xfa, 0x9f, 0xc0, 0x1f, 0xcb, 0xad}):
     	  p, err := d.int8()
	  if err != nil {
     	     return nil, err
	  }
     	retValue = *(p)
     case bytes.Equal(hashValue, []byte{0x9, 0x66, 0x78, 0xbb, 0x4a, 0x86, 0x63, 0x8d, 0x8e, 0xc6, 0x58, 0x8e, 0xcc, 0x2d, 0x89, 0x5a, 0x5c, 0x17, 0xb4, 0x86, 0x37, 0x8c, 0x81, 0xc2, 0xf2, 0xac, 0xf2, 0x48, 0x67, 0x57, 0x82, 0x13, 0x3e, 0x2e, 0x7d, 0x80, 0xb6, 0x66, 0x8d, 0x84, 0xc4, 0x55, 0xf4, 0xc9, 0xe1, 0x33, 0xfc, 0x71, 0xb, 0x77, 0x43, 0x63, 0x6, 0x82, 0x76, 0x63, 0x7, 0xbc, 0xf1, 0x64, 0xdb, 0xd9, 0x5c, 0x93}):
     	  p, err := d.uint8()
	  if err != nil {
     	     return nil, err
	  }
     	retValue = *(p)
     case bytes.Equal(hashValue, []byte{0x99, 0x7f, 0x69, 0x9c, 0x17, 0xfd, 0x6, 0x74, 0x8c, 0x2d, 0xba, 0xc4, 0x61, 0x1, 0x35, 0x21, 0xf1, 0x97, 0xd8, 0x1e, 0x74, 0x3c, 0x2f, 0x96, 0x56, 0xe6, 0xdc, 0xfc, 0x14, 0x1e, 0xd, 0x83, 0x36, 0xdc, 0x73, 0x36, 0xb0, 0xf4, 0x9e, 0x40, 0x2b, 0xfe, 0x97, 0x6f, 0xfa, 0xa5, 0x27, 0xac, 0xe1, 0xa2, 0x57, 0x2a, 0xae, 0x6d, 0x18, 0x22, 0xe2, 0xdc, 0xd8, 0x79, 0xe0, 0xb6, 0xf6, 0x7e}):
     	  p, err := d.int16()
	  if err != nil {
     	     return nil, err
	  }
     	retValue = *(p)
     case bytes.Equal(hashValue, []byte{0xa9, 0x1f, 0x92, 0xf4, 0xe9, 0x96, 0xb6, 0xd4, 0xa4, 0xcb, 0x85, 0x8d, 0x11, 0x80, 0x20, 0x10, 0xd6, 0x29, 0xba, 0x29, 0xe1, 0x89, 0x50, 0x2c, 0xa0, 0xf2, 0xcb, 0x1d, 0x86, 0xb8, 0x27, 0x3b, 0x67, 0xf3, 0x35, 0x72, 0xd1, 0x78, 0x15, 0xcc, 0xb0, 0x94, 0x94, 0x6f, 0x2, 0xab, 0x2e, 0x46, 0xcd, 0x74, 0xea, 0xf5, 0x15, 0xa, 0x26, 0xdc, 0x4e, 0xf7, 0xd, 0x9f, 0x3a, 0x9c, 0x6e, 0x55}):
     	  p, err := d.uint16()
	  if err != nil {
     	     return nil, err
	  }
     	retValue = *(p)
     case bytes.Equal(hashValue, []byte{0xeb, 0xc1, 0x67, 0x8b, 0x6, 0x82, 0x70, 0x21, 0x38, 0xc2, 0xd9, 0x9e, 0x33, 0x22, 0xd1, 0xa8, 0xc7, 0x2e, 0x9b, 0x68, 0xe9, 0x41, 0x12, 0x0, 0x1e, 0x3e, 0x51, 0xa8, 0xf5, 0xd9, 0xfa, 0x34, 0xc, 0x44, 0x9c, 0x6, 0x6d, 0x9d, 0x4c, 0xe7, 0x2a, 0x6, 0xab, 0x75, 0x77, 0x5d, 0xdf, 0x28, 0x34, 0x88, 0x7c, 0x7e, 0x96, 0x97, 0xbb, 0x8a, 0x95, 0xfe, 0x7, 0x65, 0xf7, 0x7c, 0x7e, 0x4c}):
     	  p, err := d.int32()
	  if err != nil {
     	     return nil, err
	  }
     	retValue = *(p)
     case bytes.Equal(hashValue, []byte{0xce, 0xf4, 0x3a, 0x5, 0xae, 0x67, 0xd9, 0x73, 0xc2, 0xa2, 0x1d, 0xf8, 0xcd, 0xf9, 0xd2, 0xde, 0x69, 0x8d, 0xd, 0xb7, 0x61, 0xb9, 0x51, 0x22, 0x58, 0xed, 0x8f, 0xb1, 0x83, 0xf1, 0x5c, 0xff, 0x5b, 0x84, 0xe2, 0x14, 0xe, 0x10, 0x68, 0x3f, 0x7a, 0xd9, 0xa7, 0x8f, 0x5b, 0xe4, 0x9e, 0x4e, 0x0, 0x7d, 0xcb, 0xfb, 0xd1, 0x69, 0x59, 0x9d, 0xbf, 0x9b, 0x75, 0x65, 0x15, 0x9e, 0x8b, 0x82}):
     	  p, err := d.uint32()
	  if err != nil {
     	     return nil, err
	  }
     	retValue = *(p)
     case bytes.Equal(hashValue, []byte{0x56, 0x16, 0x70, 0x35, 0xd0, 0x9, 0x18, 0x69, 0xe, 0xae, 0xad, 0x60, 0xd1, 0xee, 0x39, 0xa8, 0x61, 0x45, 0x58, 0x5b, 0x99, 0x20, 0x94, 0x57, 0x1f, 0xb0, 0x48, 0xeb, 0xb2, 0xcf, 0x5c, 0xa5, 0x8d, 0xc7, 0x8e, 0x7e, 0x3c, 0x89, 0xcd, 0x2f, 0xdc, 0xf2, 0x1c, 0x2a, 0xe3, 0xd2, 0x7f, 0x98, 0xc2, 0xad, 0x1c, 0x3d, 0x4e, 0x62, 0xd9, 0xdb, 0xc8, 0xc8, 0x59, 0xc5, 0xd5, 0xc6, 0xed, 0x7a}):
     	  p, err := d.int64()
	  if err != nil {
     	     return nil, err
	  }
     	retValue = *(p)
     case bytes.Equal(hashValue, []byte{0x11, 0x26, 0xb3, 0xd, 0x51, 0x59, 0x87, 0x5e, 0xd, 0x5b, 0x93, 0xfc, 0x92, 0xf0, 0x78, 0xaa, 0x12, 0xac, 0x93, 0xb8, 0x30, 0x1f, 0x48, 0xe, 0x13, 0x4d, 0x8b, 0xfb, 0x4c, 0x58, 0xfa, 0x3a, 0x69, 0x6a, 0x81, 0x1, 0xc5, 0x47, 0xc1, 0x55, 0x43, 0x95, 0x41, 0xdf, 0x3c, 0x8e, 0xb6, 0x96, 0x4a, 0x3c, 0x88, 0xab, 0x3f, 0x88, 0xed, 0x37, 0x5f, 0x8, 0x4a, 0x41, 0x8e, 0xd5, 0xda, 0x1e}):
     	  p, err := d.uint64()
	  if err != nil {
     	     return nil, err
	  }
     	retValue = *(p)
     case bytes.Equal(hashValue, []byte{0x42, 0x36, 0xae, 0xd3, 0x62, 0xca, 0x34, 0x75, 0x94, 0x52, 0xf0, 0x5f, 0x44, 0x83, 0x61, 0x75, 0x69, 0x39, 0xcf, 0x69, 0x74, 0x91, 0xee, 0x8d, 0x35, 0x8c, 0xd7, 0xa1, 0x63, 0xf, 0x88, 0x86, 0x6b, 0x52, 0xdd, 0x6d, 0xe1, 0xb2, 0x26, 0xf4, 0x3a, 0x9c, 0x9e, 0xf1, 0x56, 0xd, 0xf1, 0x48, 0x7, 0x39, 0x46, 0xf8, 0xe9, 0xd3, 0xab, 0x86, 0xe0, 0x1c, 0x98, 0xd, 0x17, 0x6b, 0x2, 0x63}):
     	  p, err := d.float32()
	  if err != nil {
     	     return nil, err
	  }
     	retValue = *(p)
     case bytes.Equal(hashValue, []byte{0x65, 0x9b, 0xb2, 0x59, 0x85, 0xe2, 0x60, 0xe7, 0x1e, 0x12, 0x17, 0x3f, 0xc3, 0x1f, 0x20, 0x45, 0x8, 0x9e, 0x7e, 0x11, 0x6b, 0xaa, 0xb3, 0x1e, 0x6d, 0x7d, 0x7a, 0x5b, 0xe3, 0x3d, 0x40, 0xb5, 0x40, 0x6, 0x52, 0x85, 0x37, 0x80, 0x2c, 0xd8, 0x7d, 0x48, 0x67, 0xe3, 0x9a, 0xdd, 0xc9, 0x13, 0x11, 0x2c, 0xa5, 0xcc, 0x5a, 0x33, 0xbc, 0x35, 0x6b, 0x3e, 0xa8, 0x75, 0x93, 0x84, 0xcf, 0x1b}):
     	  p, err := d.float64()
	  if err != nil {
     	     return nil, err
	  }
     	retValue = *(p)
     case bytes.Equal(hashValue, []byte{0x3e, 0x76, 0x6, 0x81, 0x73, 0x27, 0x61, 0xed, 0x16, 0x8e, 0xa3, 0x8, 0xe1, 0x10, 0x11, 0x85, 0xe1, 0xbd, 0x39, 0x2, 0xee, 0x67, 0x60, 0x21, 0x6a, 0x59, 0xc4, 0x7, 0x5a, 0x99, 0xc1, 0x46, 0xb7, 0xcd, 0x98, 0x14, 0xce, 0x14, 0x47, 0xe, 0xb0, 0x80, 0x6d, 0x91, 0x66, 0x50, 0xb0, 0xe5, 0xe, 0x77, 0x6f, 0x53, 0xe5, 0xd1, 0x72, 0x28, 0x1d, 0xd0, 0xe1, 0x70, 0x43, 0xc8, 0x65, 0x39}):
     	  p, err := d.bool()
	  if err != nil {
     	     return nil, err
	  }
     	retValue = *(p)
     case bytes.Equal(hashValue, []byte{0x27, 0x57, 0xcb, 0x3c, 0xaf, 0xc3, 0x9a, 0xf4, 0x51, 0xab, 0xb2, 0x69, 0x7b, 0xe7, 0x9b, 0x4a, 0xb6, 0x1d, 0x63, 0xd7, 0x4d, 0x85, 0xb0, 0x41, 0x86, 0x29, 0xde, 0x8c, 0x26, 0x81, 0x1b, 0x52, 0x9f, 0x3f, 0x37, 0x80, 0xd0, 0x15, 0x0, 0x63, 0xff, 0x55, 0xa2, 0xbe, 0xee, 0x74, 0xc4, 0xec, 0x10, 0x2a, 0x2a, 0x27, 0x31, 0xa1, 0xf1, 0xf7, 0xf1, 0xd, 0x47, 0x3a, 0xd1, 0x8a, 0x6a, 0x87}):
     	  p, err := d.string()
	  if err != nil {
     	     return nil, err
	  }
     	retValue = *(p)
     default:
	e := NewSayIError("Wrong type used as Any")
	return retValue, e
     }
     return retValue, nil
}

func (d *Decoder) Any() (retValue interface{}, error os.Error) {
     return d.any()
}

