func AsyncHandle{{.InterfaceName}}(event syscall.EventTree, fd syscall.Fd) (newEventId syscall.EventId, error os.Error) {
     newEventId = 0
     bufferSize := event.ReturnSize
     buffer := make([]byte, bufferSize)
     _, status := syscall.Retire(event.EventId, buffer)
     if status != syscall.StatusOk {
     	return newEventId, NewSayIError("Can't Retire")
     }
     bufReader := bytes.NewBuffer(buffer)
     d := NewDecoder(bufReader)
     writer := ethos.NewWriter(fd)
     e := NewEncoder(writer)

     methodId, err := d.uint64()
     if err != nil {
     	return newEventId, err		
     }

     switch *methodId{
     	    {{range .Cases}}
	    case {{.MethodId}}:
	    	 /* FIXME: Temporarily place reset here. We also reset in ReadAll calls. This 
		  *        should probably go in one place: each type decoder, but we need
		  *        to be able to differentiate between an application-called decode
		  *        and a decode of internal elements. The latter case should not 
		  *        call reset. */
	    	 d.reset()
	    	 {{if .CallType}}
		 cid, err := d.uint64()
     		 if err != nil {
		      	return newEventId, err		
		 }
		{{range $index, $elmt := .Args}}
		{{.ArgName}}, err{{$index}} := d.{{.TypeNameNonCap}}()
		if err{{$index}} != nil {
		   return newEventId, err{{$index}}
		}
		{{end}}
		{{if .HasReturn}}
		{{.LocalFuncName}}(e, *cid, {{range $index, $Arg := .Args}}{{if $index}},{{$Arg.ArgName}}{{else}}{{$Arg.ArgName}}{{end}}{{end}})
		{{else}}
		{{.LocalFuncName}}(e, *cid, {{range $index, $Arg := .Args}}{{if $index}},{{$Arg.ArgName}}{{else}}{{$Arg.ArgName}}{{end}}{{end}})
		{{end}}
		{{else}}
		{{if .HasReturn}}
		cid, err = d.uint64()
     		 if err != nil {
		      	return newEventId, err		
		 }
		{{range $index, $elmt := .Args}}
		{{.ArgName}}, err{{$index}} := d.{{.TypeNameNonCap}}()
		if err{{$index}} != nil {
		   return newEventId, err{{$index}}
		}
		{{end}}
		{{.LocalFuncName}}(e, *cid, {{range .Args}},{{.ArgName}}{{end}})
		{{end}}
		{{end}}
	    {{end}}
	    default:
	    	 e := NewSayIError("Wrong MethodID")
		 return newEventId, e
     }
     if fd != syscall.Fd(^(uint32(0))) {
     	newEventId, status = syscall.Read(fd)
	if status != syscall.StatusOk {
     	   return newEventId, NewSayIError("Can't issue Read syscall")		   
	}
     }
     return newEventId, nil
}

